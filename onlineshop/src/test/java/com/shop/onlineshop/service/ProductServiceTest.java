package com.shop.onlineshop.service;

import com.shop.onlineshop.entity.Product;
import com.shop.onlineshop.entity.ProductCategory;
import com.shop.onlineshop.service.ProductService;
import org.assertj.core.api.Condition;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.math.BigDecimal;
import java.util.List;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@AutoConfigureTestDatabase
@ActiveProfiles("test")
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class ProductServiceTest {

    @Autowired
    ProductService productService;

    @Autowired
    JdbcTemplate jdbcTemplate;

    long productCategoryIdAutogenerated = 1L;

    long beforeEachProductCategoryId = 15L;
    static Product testProduct;

    static ProductCategory productCategory;
    @BeforeAll
    static void  setInitialProduct(){
        productCategory = ProductCategory.builder()
                .categoryName("TestCategory")
                .build();

        testProduct = Product.builder()
                .category(productCategory)
                .name("Test Product 1")
                .upc("TEST-PROD-UPC")
                .active(true)
                .description("Test product 1 description")
                .imageUrl("/test/prod/1")
                .unitPrice(BigDecimal.valueOf(30.3))
                .unitsInStock(15)
                .build();
    }

    @BeforeEach
    void createProductCategoryAndProduct(){
        jdbcTemplate.execute("INSERT INTO product_category(product_category_id, category_name) VALUES (15, 'Books')");
        jdbcTemplate.execute("INSERT INTO product (product_id,upc, name, description, image_url, active, units_in_stock, unit_price, product_category_id,date_created) VALUES " +
                "(1, 'BOOK-TECH-1000', 'Crash Course in Python', 'Learn Python at your own pace. The author explains how the technology works in easy-to-understand language. This book includes working examples that you can apply to your own projects. Purchase the book and get started today!', 'assets/images/products/books/book-1000.png', 1, 100, 14.99, 15, NOW())");
        jdbcTemplate.execute("INSERT INTO product (product_id,upc, name, description, image_url, active, units_in_stock, unit_price, product_category_id,date_created) VALUES " +
                "(2, 'BOOK-TECH-1001', 'Book2', 'Test 2 book', 'assets/images/products/books/book-1000.png', 1, 100, 14.99, 15, NOW())");

    }

    @AfterEach
    void deleteProductCategoryAndProduct(){
        jdbcTemplate.execute("Delete from Product where product_category_id = 15");
        jdbcTemplate.execute("Delete from product_category where product_category_id = 15");
    }
    Condition<Product> productIdCondition = new Condition<>(
            p-> p.getProductId() == 1L, "expected the Product Id to be be 1.");
    Condition<Product> productUPCCondition = new Condition<>(
            p-> p.getUpc().equals("BOOK-TECH-1000"), "expected the Product UPC to be be 'BOOK-TECH-1000'.");

    Condition<Product> productUPCCondition2 = new Condition<>(
            p-> p.getUpc().equals("BOOK-TECH-1001"), "expected the Product UPC to be be 'BOOK-TECH-1000'.");


    @Test
    @Order(1)
    void createProductCategory(){
        ProductCategory newProductCategory = productService.saveProductCategory(productCategory);

        productCategoryIdAutogenerated = newProductCategory.getProductCategoryId();

       assertNotNull(newProductCategory);
       assertEquals(newProductCategory.getProductCategoryId(), productCategory.getProductCategoryId());
       assertEquals(newProductCategory.getCategoryName(), productCategory.getCategoryName());
    }

    @Test
    @Order(2)
    void getProductCategory(){
        ProductCategory newProductCategory = productService.findCategoryByProductCategoryId(productCategoryIdAutogenerated);

        assertNotNull(newProductCategory);
        assertEquals(newProductCategory.getProductCategoryId(), productCategory.getProductCategoryId());
        assertEquals(newProductCategory.getCategoryName(), productCategory.getCategoryName());
    }

    @Test
    @Order(3)
    void deleteProductCategory(){
        productService.deleteProductCategory(productCategoryIdAutogenerated);

       ProductCategory deletedProductCategory =  productService.findCategoryByProductCategoryId(productCategoryIdAutogenerated);
        assertNull(deletedProductCategory);

    }

    @Test
    @Order(11)
    void findProductById (){

        Product product = productService.getProductById(1L);

        assertThat(product)
                .isNotNull()
                .has(productIdCondition)
                .has(productUPCCondition);
    }

    @Test
    @Order(11)
    void findAllProducts (){

        List<Product> productsList = productService.getAllProducts
                (Pageable.unpaged(
                        Sort.by(Sort.Order.asc("dateCreated"))
                        )
                ).toList();

        assertThat(productsList)
                .isNotNull()
                .hasSize(2)
                .has(productUPCCondition, atIndex(0));
    }

    @Test
    @Order(12)
    void findProductByName (){

        Page<Product> product = productService.findByProductName("Crash Course in Python", Pageable.unpaged());

        assertThat(product.toList())
                .isNotNull()
                .hasSize(1)
                .has(productIdCondition,atIndex(0))
                .has(productUPCCondition, atIndex(0));
    }

    @Test
    @Order(13)
    void findProductByCategory (){

        Page<Product> product = productService.findByProductCategoryId(beforeEachProductCategoryId, Pageable.unpaged());

        assertThat(product.toList())
                .isNotNull()
                .hasSize(2)
                .areExactly(1,productUPCCondition);
    }


}
